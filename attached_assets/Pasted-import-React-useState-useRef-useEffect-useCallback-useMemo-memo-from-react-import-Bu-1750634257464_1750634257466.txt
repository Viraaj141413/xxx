import React, { useState, useRef, useEffect, useCallback, useMemo, memo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Skeleton } from '@/components/ui/skeleton';
import { Progress } from '@/components/ui/progress';
import { Loader2, Send, Code, FileText, Zap, AlertCircle, CheckCircle, Info, X, Save, MessageSquare } from 'lucide-react';
import TypingAnimation from '@/components/ui/typing-animation';
import LoadingAnimation from '@/components/ui/loading-animation';
import CodeStream from '@/components/ui/code-stream';
import { Project } from '@/lib/file-system';
import { useProjects } from '@/hooks/useProjects';
import { useAuth } from '@/hooks/useAuth';

// Enhanced Types and Interfaces
interface ChatMessage {
  id: string;
  sender: 'user' | 'ai';
  content: string;
  timestamp: Date;
  type?: 'analysis' | 'code' | 'normal' | 'error' | 'system';
  metadata?: {
    filesGenerated?: string[];
    language?: string;
    stage?: string;
    complexity?: 'basic' | 'intermediate' | 'advanced' | 'enterprise';
    patterns?: string[];
    technologies?: string[];
    estimatedLines?: number;
  };
}

interface ChatInterfaceProps {
  project: Project;
  onConsoleLog: (message: string, type?: 'success' | 'error' | 'info') => void;
  onAppUpdate?: (htmlContent: string) => void;
  onFileGenerated?: (fileName: string, content: string, language: string) => void;
}

interface GenerationStage {
  id: string;
  name: string;
  description: string;
  progress: number;
  estimatedTime: number;
}

interface LiveCodingState {
  fileName: string;
  content: string;
  isActive: boolean;
  language: string;
  progress: number;
  complexity: string;
  patterns: string[];
}

interface APIResponse {
  response: string;
  success: boolean;
  error?: string;
  metadata?: {
    complexity?: string;
    patterns?: string[];
    technologies?: string[];
    estimatedLines?: number;
    architecture?: string;
  };
}

interface CancelToken {
  cancelled: boolean;
  cancel: () => void;
}

// Enhanced Constants with Advanced Code Generation Prompts
const ADVANCED_CODE_GENERATION_PROMPT = `
Generate production-ready, enterprise-level code with the following requirements:

ARCHITECTURE & PATTERNS:
- Apply appropriate design patterns (Repository, Factory, Observer, Strategy, etc.)
- Use SOLID principles and clean architecture
- Implement proper dependency injection and inversion of control
- Include comprehensive error handling and logging
- Add input validation and sanitization
- Implement proper security measures (authentication, authorization, data encryption)

CODE QUALITY:
- Write comprehensive unit tests with high coverage
- Add detailed JSDoc/documentation comments
- Implement proper type safety (TypeScript interfaces, generics)
- Use modern ES6+ features and best practices
- Include performance optimizations (caching, lazy loading, memoization)
- Add accessibility features (ARIA labels, keyboard navigation)

SCALABILITY & MAINTENANCE:
- Modular, reusable component architecture
- Configuration management and environment variables
- Database migrations and schema management
- API versioning and backwards compatibility
- Monitoring, logging, and observability
- CI/CD pipeline configurations

ADVANCED FEATURES:
- Real-time functionality (WebSockets, SSE)
- Caching strategies (Redis, browser cache)
- Rate limiting and throttling
- Background job processing
- File upload/download with progress
- Internationalization (i18n) support
- Dark/light theme switching
- Progressive Web App features

SECURITY:
- JWT authentication with refresh tokens
- CSRF protection
- SQL injection prevention
- XSS protection
- Content Security Policy headers
- Input validation and sanitization
- Secure password hashing
- API rate limiting

Please generate comprehensive, production-ready code following these guidelines.
`;

const INITIAL_MESSAGE: ChatMessage = {
  id: '1',
  sender: 'ai',
  content: 'ðŸš€ **Advanced AI Code Generator** powered by Claude\n\nI create **enterprise-grade applications** with:\nâ€¢ 15-30+ professional files\nâ€¢ Modern architecture patterns (Clean Architecture, DDD, CQRS)\nâ€¢ Production-ready security & scalability\nâ€¢ Comprehensive testing suites\nâ€¢ CI/CD configurations\nâ€¢ Database designs & migrations\nâ€¢ API documentation & versioning\n\nDescribe your project and I\'ll generate a complete, deployable codebase with industry best practices.',
  timestamp: new Date(),
  type: 'system'
};

const ADVANCED_GENERATION_STAGES: GenerationStage[] = [
  { id: 'analyze', name: 'Advanced Requirements Analysis', description: 'Analyzing complex requirements & architectural needs', progress: 0, estimatedTime: 2000 },
  { id: 'architecture', name: 'Enterprise Architecture Design', description: 'Designing scalable, maintainable architecture', progress: 15, estimatedTime: 3000 },
  { id: 'patterns', name: 'Design Pattern Selection', description: 'Selecting optimal design patterns & principles', progress: 30, estimatedTime: 2000 },
  { id: 'security', name: 'Security Implementation', description: 'Implementing authentication, authorization & security', progress: 45, estimatedTime: 2500 },
  { id: 'database', name: 'Database Design & Migrations', description: 'Creating optimized database schemas & migrations', progress: 60, estimatedTime: 2000 },
  { id: 'api', name: 'API Development', description: 'Building RESTful APIs with documentation', progress: 75, estimatedTime: 3000 },
  { id: 'frontend', name: 'Advanced Frontend', description: 'Creating responsive, accessible UI components', progress: 85, estimatedTime: 2500 },
  { id: 'testing', name: 'Comprehensive Testing', description: 'Generating unit, integration & e2e tests', progress: 92, estimatedTime: 2000 },
  { id: 'devops', name: 'DevOps & Deployment', description: 'Creating CI/CD pipelines & deployment configs', progress: 96, estimatedTime: 1500 },
  { id: 'finalize', name: 'Production Optimization', description: 'Final optimizations & documentation', progress: 100, estimatedTime: 1000 }
];

// Message Persistence
const STORAGE_KEY = 'chat_interface_messages';
const MAX_STORED_MESSAGES = 100;

const saveMessagesToStorage = (messages: ChatMessage[]) => {
  try {
    const messagesToSave = messages.slice(-MAX_STORED_MESSAGES);
    localStorage.setItem(STORAGE_KEY, JSON.stringify(messagesToSave));
  } catch (error) {
    console.warn('Failed to save messages to storage:', error);
  }
};

const loadMessagesFromStorage = (): ChatMessage[] => {
  try {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored) {
      const messages = JSON.parse(stored);
      return Array.isArray(messages) ? messages : [INITIAL_MESSAGE];
    }
  } catch (error) {
    console.warn('Failed to load messages from storage:', error);
  }
  return [INITIAL_MESSAGE];
};

// Enhanced Custom Hooks
const useAutoScroll = (dependency: any[]) => {
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, dependency);
  
  return messagesEndRef;
};

const useKeyboardShortcuts = (onSubmit: () => void, onCancel: () => void, disabled: boolean) => {
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && !disabled) {
        e.preventDefault();
        onSubmit();
      }
      if (e.key === 'Escape' && !disabled) {
        e.preventDefault();
        onCancel();
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [onSubmit, onCancel, disabled]);
};

const useMessagePersistence = () => {
  const [messages, setMessages] = useState<ChatMessage[]>(() => loadMessagesFromStorage());

  useEffect(() => {
    saveMessagesToStorage(messages);
  }, [messages]);

  return [messages, setMessages] as const;
};

const useCancelToken = (): [CancelToken, () => CancelToken] => {
  const [cancelToken, setCancelToken] = useState<CancelToken>({ cancelled: false, cancel: () => {} });

  const createCancelToken = useCallback((): CancelToken => {
    const token: CancelToken = {
      cancelled: false,
      cancel: () => { token.cancelled = true; }
    };
    setCancelToken(token);
    return token;
  }, []);

  return [cancelToken, createCancelToken];
};

// Enhanced Utility Functions
const getAdvancedLanguageExtension = (language: string): { extension: string; category: string } => {
  const languageMap: Record<string, { extension: string; category: string }> = {
    // Frontend
    javascript: { extension: 'js', category: 'frontend' },
    typescript: { extension: 'ts', category: 'frontend' },
    jsx: { extension: 'jsx', category: 'frontend' },
    tsx: { extension: 'tsx', category: 'frontend' },
    vue: { extension: 'vue', category: 'frontend' },
    svelte: { extension: 'svelte', category: 'frontend' },
    
    // Backend
    python: { extension: 'py', category: 'backend' },
    java: { extension: 'java', category: 'backend' },
    csharp: { extension: 'cs', category: 'backend' },
    go: { extension: 'go', category: 'backend' },
    rust: { extension: 'rs', category: 'backend' },
    php: { extension: 'php', category: 'backend' },
    
    // Styling
    css: { extension: 'css', category: 'styling' },
    scss: { extension: 'scss', category: 'styling' },
    less: { extension: 'less', category: 'styling' },
    stylus: { extension: 'styl', category: 'styling' },
    
    // Data
    json: { extension: 'json', category: 'config' },
    yaml: { extension: 'yml', category: 'config' },
    toml: { extension: 'toml', category: 'config' },
    xml: { extension: 'xml', category: 'config' },
    
    // Database
    sql: { extension: 'sql', category: 'database' },
    graphql: { extension: 'graphql', category: 'database' },
    
    // Documentation
    markdown: { extension: 'md', category: 'docs' },
    
    // DevOps
    dockerfile: { extension: 'Dockerfile', category: 'devops' },
    shell: { extension: 'sh', category: 'devops' },
    bash: { extension: 'sh', category: 'devops' },
    powershell: { extension: 'ps1', category: 'devops' },
    
    // Testing
    test: { extension: 'test.js', category: 'testing' },
    spec: { extension: 'spec.js', category: 'testing' }
  };
  
  return languageMap[language] || { extension: 'txt', category: 'other' };
};

const parseAdvancedCodeBlocks = (content: string): Array<{
  language: string;
  code: string;
  fileName: string;
  category: string;
  complexity: string;
  patterns: string[];
}> => {
  const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
  const blocks: Array<{
    language: string;
    code: string;
    fileName: string;
    category: string;
    complexity: string;
    patterns: string[];
  }> = [];
  let match;
  let index = 0;

  while ((match = codeBlockRegex.exec(content)) !== null) {
    const language = match[1] || 'text';
    const code = match[2].trim();
    const { extension, category } = getAdvancedLanguageExtension(language);
    
    // Determine complexity based on code patterns
    const complexity = analyzeCodeComplexity(code);
    const patterns = detectDesignPatterns(code);
    
    // Generate intelligent file names based on content
    const fileName = generateIntelligentFileName(code, language, extension, index);
    
    blocks.push({ language, code, fileName, category, complexity, patterns });
    index++;
  }

  return blocks;
};

const analyzeCodeComplexity = (code: string): string => {
  const lines = code.split('\n').length;
  const hasAsync = /async|await|Promise/i.test(code);
  const hasClasses = /class\s+\w+/i.test(code);
  const hasInterfaces = /interface\s+\w+/i.test(code);
  const hasGenerics = /<[A-Z]\w*>/i.test(code);
  const hasDecorators = /@\w+/i.test(code);
  const hasAdvancedPatterns = /Factory|Strategy|Observer|Singleton|Repository/i.test(code);

  if (lines > 200 || hasDecorators || hasAdvancedPatterns) return 'enterprise';
  if (lines > 100 || hasGenerics || hasInterfaces) return 'advanced';
  if (lines > 50 || hasAsync || hasClasses) return 'intermediate';
  return 'basic';
};

const detectDesignPatterns = (code: string): string[] => {
  const patterns: string[] = [];
  
  if (/Factory/i.test(code)) patterns.push('Factory');
  if (/Strategy/i.test(code)) patterns.push('Strategy');
  if (/Observer|EventEmitter|addEventListener/i.test(code)) patterns.push('Observer');
  if (/Singleton/i.test(code)) patterns.push('Singleton');
  if (/Repository/i.test(code)) patterns.push('Repository');
  if (/Decorator|@\w+/i.test(code)) patterns.push('Decorator');
  if (/Adapter/i.test(code)) patterns.push('Adapter');
  if (/Builder/i.test(code)) patterns.push('Builder');
  if (/Command/i.test(code)) patterns.push('Command');
  if (/Facade/i.test(code)) patterns.push('Facade');

  return patterns;
};

const generateIntelligentFileName = (code: string, language: string, extension: string, index: number): string => {
  // Extract meaningful names from code
  const classMatch = code.match(/class\s+(\w+)/i);
  const functionMatch = code.match(/(?:function|const|let|var)\s+(\w+)/i);
  const componentMatch = code.match(/(?:function|const)\s+(\w+Component)/i);
  const serviceMatch = code.match(/(\w+Service)/i);
  const modelMatch = code.match(/(?:class|interface)\s+(\w+Model)/i);
  const configMatch = code.match(/config|Config|CONFIG/i);
  const testMatch = code.match(/test|Test|describe|it\(/i);

  if (testMatch) return `tests/test_${index + 1}.${extension}`;
  if (configMatch) return `config/config.${extension}`;
  if (modelMatch) return `models/${modelMatch[1].toLowerCase()}.${extension}`;
  if (serviceMatch) return `services/${serviceMatch[1].toLowerCase()}.${extension}`;
  if (componentMatch) return `components/${componentMatch[1]}.${extension}`;
  if (classMatch) return `${classMatch[1].toLowerCase()}.${extension}`;
  if (functionMatch) return `${functionMatch[1].toLowerCase()}.${extension}`;

  // Fallback to category-based naming
  const categoryNames: Record<string, string> = {
    frontend: 'components',
    backend: 'services',
    styling: 'styles',
    config: 'config',
    database: 'database',
    docs: 'docs',
    devops: 'deploy',
    testing: 'tests'
  };

  const { category } = getAdvancedLanguageExtension(language);
  const categoryName = categoryNames[category] || 'src';
  
  return `${categoryName}/file_${index + 1}.${extension}`;
};

// Enhanced Loading Skeleton Component
const MessageSkeleton = memo(() => (
  <div className="space-y-4">
    {[...Array(3)].map((_, i) => (
      <div key={i} className="flex justify-start">
        <div className="max-w-[80%] bg-white dark:bg-gray-800 rounded-lg p-3 shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center gap-2 mb-2">
            <Skeleton className="h-4 w-4 rounded" />
            <Skeleton className="h-3 w-16" />
            <Skeleton className="h-5 w-12 rounded-full" />
          </div>
          <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
            <Skeleton className="h-4 w-1/2" />
          </div>
        </div>
      </div>
    ))}
  </div>
));

// Enhanced Components
const MessageIcon = memo(({ type }: { type?: string }) => {
  const iconProps = { className: "w-4 h-4" };
  
  switch (type) {
    case 'analysis': return <Zap {...iconProps} className="w-4 h-4 text-blue-500" />;
    case 'code': return <Code {...iconProps} className="w-4 h-4 text-green-500" />;
    case 'error': return <AlertCircle {...iconProps} className="w-4 h-4 text-red-500" />;
    case 'system': return <Info {...iconProps} className="w-4 h-4 text-purple-500" />;
    default: return <MessageSquare {...iconProps} className="w-4 h-4 text-gray-500" />;
  }
});

const AdvancedGenerationProgress = memo(({ 
  currentStage, 
  progress, 
  estimatedTime,
  onCancel 
}: { 
  currentStage: string; 
  progress: number; 
  estimatedTime: number;
  onCancel: () => void;
}) => (
  <div className="space-y-4">
    <div className="flex items-center justify-between">
      <span className="text-sm font-medium">{currentStage}</span>
      <div className="flex items-center gap-2">
        <span className="text-xs text-gray-500">{progress}%</span>
        <Button
          variant="ghost"
          size="sm"
          onClick={onCancel}
          className="h-6 w-6 p-0 text-red-500 hover:text-red-700"
        >
          <X className="h-3 w-3" />
        </Button>
      </div>
    </div>
    <Progress value={progress} className="w-full" />
    <div className="text-xs text-gray-500">
      Estimated time: {Math.ceil(estimatedTime / 1000)}s
    </div>
  </div>
));

const EnhancedLiveCodingDisplay = memo(({ liveCoding }: { liveCoding: LiveCodingState }) => {
  if (!liveCoding.isActive) return null;

  return (
    <div className="flex justify-start">
      <Card className="max-w-[95%] p-4">
        <div className="flex items-center gap-2 mb-3">
          <Code className="w-4 h-4 text-green-500" />
          <span className="text-sm font-medium">{liveCoding.fileName}</span>
          <Badge variant="outline" className="text-xs">
            {liveCoding.language}
          </Badge>
          <Badge variant="secondary" className="text-xs">
            {liveCoding.complexity}
          </Badge>
          {liveCoding.patterns.map(pattern => (
            <Badge key={pattern} variant="outline" className="text-xs text-purple-600">
              {pattern}
            </Badge>
          ))}
          <div className="ml-auto text-xs text-gray-500">
            {liveCoding.progress}%
          </div>
        </div>
        <div className="bg-gray-900 text-green-400 p-4 rounded text-xs font-mono overflow-x-auto max-h-80">
          <TypingAnimation 
            text={liveCoding.content} 
            speed={1} 
            className="whitespace-pre"
          />
        </div>
      </Card>
    </div>
  );
});

const ChatMessage = memo(({ message }: { message: ChatMessage }) => (
  <div className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
    <div className={`max-w-[80%] ${
      message.sender === 'user'
        ? 'bg-blue-500 text-white'
        : message.type === 'error'
        ? 'bg-red-50 dark:bg-red-900/20 text-red-900 dark:text-red-100 border border-red-200 dark:border-red-800'
        : message.type === 'system'
        ? 'bg-purple-50 dark:bg-purple-900/20 text-purple-900 dark:text-purple-100 border border-purple-200 dark:border-purple-800'
        : 'bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700'
    } rounded-lg p-3 shadow-sm transition-all duration-200 hover:shadow-md`}>
      <div className="flex items-center gap-2 mb-1 flex-wrap">
        {message.sender === 'ai' && <MessageIcon type={message.type} />}
        <span className="text-xs text-gray-500 dark:text-gray-400">
          {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
        </span>
        {message.type && (
          <Badge variant="outline" className="text-xs">
            {message.type}
          </Badge>
        )}
        {message.metadata?.complexity && (
          <Badge variant="secondary" className="text-xs">
            {message.metadata.complexity}
          </Badge>
        )}
        {message.metadata?.filesGenerated && (
          <Badge variant="secondary" className="text-xs">
            {message.metadata.filesGenerated.length} files
          </Badge>
        )}
        {message.metadata?.estimatedLines && (
          <Badge variant="outline" className="text-xs">
            ~{message.metadata.estimatedLines} lines
          </Badge>
        )}
      </div>
      
      {message.metadata?.patterns && message.metadata.patterns.length > 0 && (
        <div className="flex flex-wrap gap-1 mb-2">
          {message.metadata.patterns.map(pattern => (
            <Badge key={pattern} variant="outline" className="text-xs text-purple-600">
              {pattern}
            </Badge>
          ))}
        </div>
      )}
      
      {message.metadata?.technologies && message.metadata.technologies.length > 0 && (
        <div className="flex flex-wrap gap-1 mb-2">
          {message.metadata.technologies.map(tech => (
            <Badge key={tech} variant="outline" className="text-xs text-blue-600">
              {tech}
            </Badge>
          ))}
        </div>
      )}
      
      <div className="whitespace-pre-wrap text-sm leading-relaxed">
        {message.content}
      </div>
    </div>
  </div>
));

// Main Enhanced Component
export default function ChatInterface({ 
  project, 
  onConsoleLog, 
  onAppUpdate, 
  onFileGenerated 
}: ChatInterfaceProps) {
  // Hooks
  const { createProject } = useProjects();
  const { user } = useAuth();
  
  // Enhanced State with Message Persistence
  const [messages, setMessages] = useMessagePersistence();
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentStageIndex, setCurrentStageIndex] = useState(0);
  const [liveCoding, setLiveCoding] = useState<LiveCodingState>({
    fileName: '',
    content: '',
    isActive: false,
    language: '',
    progress: 0,
    complexity: 'basic',
    patterns: []
  });
  const [isGenerationMode, setIsGenerationMode] = useState(true);
  const [generationComplete, setGenerationComplete] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [cancelToken, createCancelToken] = useCancelToken();
  
  const inputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useAutoScroll([messages, isLoading, liveCoding]);

  // Enhanced computed values
  const currentStage = useMemo(() => 
    ADVANCED_GENERATION_STAGES[currentStageIndex] || ADVANCED_GENERATION_STAGES[0], 
    [currentStageIndex]
  );

  const canSubmit = useMemo(() => 
    !isLoading && inputValue.trim().length > 0, 
    [isLoading, inputValue]
  );

  // Initialize component
  useEffect(() => {
    const timer = setTimeout(() => setIsInitialLoad(false), 1000);
    return () => clearTimeout(timer);
  }, []);

  // Auto-start handler
  useEffect(() => {
    const handleAutoStart = (event: CustomEvent) => {
      if (event.detail?.prompt) {
        handleSubmit(event.detail.prompt);
      }
    };

    window.addEventListener('autoStartGeneration' as any, handleAutoStart);
    return () => window.removeEventListener('autoStartGeneration' as any, handleAutoStart);
  }, []);

  // Enhanced keyboard shortcuts
  const handleCancel = useCallback(() => {
    if (isLoading) {
      cancelToken.cancel();
      setIsLoading(false);
      setCurrentStageIndex(0);
      setLiveCoding(prev => ({ ...prev, isActive: false }));
      onConsoleLog('Generation cancelled by user', 'info');
    }
  }, [isLoading, cancelToken, onConsoleLog]);

  useKeyboardShortcuts(() => handleSubmit(), handleCancel, !canSubmit);

  // Enhanced API call with cancellation support
  const makeEnhancedAPICall = async (
    endpoint: string, 
    data: any, 
    cancelToken: CancelToken,
    retries: number = 3
  ): Promise<APIResponse> => {
    for (let attempt = 1; attempt <= retries; attempt++) {
      if (cancelToken.cancelled) {
        throw new Error('Operation cancelled');
      }

      try {
        // Enhanced prompt for better code generation
        const enhancedData = {
          ...data,
          prompt: `${ADVANCED_CODE_GENERATION_PROMPT}\n\nUser Request: ${data.prompt}`,
          options: {
            temperature: 0.7,
            max_tokens: 8000,
            model: 'claude-3-sonnet-20240229'
          }
        };

        const response = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(enhancedData)
        });

        if (cancelToken.cancelled) {
          throw new Error('Operation cancelled');
        }

        if (!response.ok) {
          throw new Error(`API Error: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();
        return { 
          ...result, 
          success: true,
          metadata: {
            complexity: 'enterprise',
            patterns: ['Clean Architecture', 'SOLID Principles', 'Repository Pattern'],
            technologies: extractTechnologies(result.response),
            estimatedLines: estimateLines(result.response),
            architecture: 'Microservices'
          }
        };
      } catch (error) {
        if (cancelToken.cancelled || attempt === retries) {
          throw error;
        }
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }
    throw new Error('Max retries exceeded');
  };

  const extractTechnologies = (content: string): string[] => {
    const techs: string[] = [];
    const patterns = [
      /React/gi, /TypeScript/gi, /Node\.js/gi, /Express/gi, /MongoDB/gi,
      /PostgreSQL/gi, /Redis/gi, /Docker/gi, /Kubernetes/gi, /AWS/gi,
      /GraphQL/gi, /Jest/gi, /Cypress/gi, /Webpack/gi, /Vite/gi,
      /Next\.js/gi, /Tailwind/gi, /Prisma/gi, /Socket\.io/gi
    ];

    patterns.forEach(pattern => {
      const matches = content.match(pattern);
      if (matches) {
        techs.push(matches[0]);
      }
    });

    return [...new Set(techs)];
  };

  const estimateLines = (content: string): number => {
    const codeBlocks = content.match(/```[\s\S]*?```/g) || [];
    return codeBlocks.reduce((total, block) => {
      return total + block.split('\n').length;
    }, 0);
  };

  // Enhanced typing simulation with cancellation
  const simulateAdvancedTyping = useCallback(async (
    code: string, 
    fileName: string, 
    language: string,
    complexity: string,
    patterns: string[],
    cancelToken: CancelToken
  ): Promise<void> => {
    const chunks = code.split('');
    let currentContent = '';
    const totalChunks = Math.ceil(chunks.length / 15);
    
    for (let i = 0; i < chunks.length; i += 15) {
      if (cancelToken.cancelled) return;
      
      currentContent += chunks.slice(i, i + 15).join('');
      const progress = Math.